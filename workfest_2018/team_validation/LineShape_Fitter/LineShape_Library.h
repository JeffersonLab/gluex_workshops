/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef LINESHAPE_LIBRARY
#define LINESHAPE_LIBRARY

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TComplex.h"
#include "RooArgList.h"
#include "RooAbsCategory.h"
#include "RooAbsPdf.h"
#include "RooListProxy.h"
#include "RooRealVar.h"
#include "particleType.h"
 
enum {POLYNOMIAL=0, BREITWIGNER, JBREITWIGNER,NONRESONANT};
enum {RESSHAPE=0,RESNORM,RESSIZE,RESL,RESMASS,RESWIDTH,RESRELPHASE,PARAM_START};

class LineShape_Library : public RooAbsPdf {
public:
  LineShape_Library() {} ; 
  LineShape_Library(const char *name, const char *title,RooArgList& _values, std::vector<RooArgList*> _res, Particle_t Dau1, Particle_t Dau2);
  LineShape_Library(const char *name, const char *title,RooArgList& _values, Particle_t Dau1, Particle_t Dau2);
  LineShape_Library(const LineShape_Library& other, const char* name=0);
  virtual TObject* clone(const char* newname) const { return new LineShape_Library(*this,newname); }
  inline virtual ~LineShape_Library() { }

  //virtual Int_t getAnalyticalIntegral( RooArgSet& allVars,  RooArgSet& analVars, const char* rangeName=0 ) const;
  //virtual Double_t analyticalIntegral( Int_t code, const char* rangeName=0 ) const;
  double Bprime(const int& L,const double& q, const double& q0, const double& d) const;
  
  TComplex R(const double& m, const double& m0, const double& gamma0, const double& q, const double& q0, const int& LKs, const double& d) const;
  TComplex NR_R(const double& m, const double& fittedm, const double& q, const double& q0, const double& res_L, const double& d, const double& alpha) const;
  TComplex BW(const double& m, const double& m0, const double& gamma0, const double& q, const double& q0, const int& L, const double& d) const;
  TComplex RJackson(const double& m, const double& m0, const double& gamma0, const double& q, const double& q0, const int& LKs, const double& d) const;
  TComplex BWJackson(const double& m, const double& m0, const double& gamma0, const double& q, const double& q0, const int& L, const double& d) const;
  
  double Gamma(const double& m, const double& gamma0, const double& q, const double& q0, const int& L, const double& m0, const double& d) const;
  double GetSumOfShapesSquared(double m) const;

  void CreateComponent(TString name,int shape,double size,double L, double mass, double width,bool isNorm);
  void AddComponent(RooListProxy* toAdd);


  LineShape_Library GetSingleComponent_PDF(TString name);
  RooListProxy* GetComponent(TString name);
  RooRealVar* GetParameter(RooListProxy* resonance, TString name);
  RooRealVar* GetParameterFromComponent(TString compname,TString paramname);

  void ReplaceResList(std::vector<RooListProxy*> newres);
  double GetIntegral(TString resname, double int_min, double int_max);



protected:

std::vector<RooListProxy*> res;
RooListProxy fitted_values;
Particle_t dau1;
Particle_t dau2;
double mDau1;
double mDau2;
  
  Double_t evaluate() const ;

private:

  
  ClassDef(LineShape_Library,1) // Your description goes here...
};
 
#endif
